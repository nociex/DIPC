name: Build and Push Multi-Architecture Images

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  # 使用 GitHub Container Registry
  REGISTRY: ghcr.io
  # 镜像名称前缀（将使用您的 GitHub 用户名）
  IMAGE_PREFIX: ${{ github.repository_owner }}/dipc

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - name: api
            context: ./api
            dockerfile: ./api/Dockerfile
            service_name: dipc-api
          - name: worker
            context: ./workers
            dockerfile: ./workers/Dockerfile
            service_name: dipc-worker
          - name: frontend
            context: ./frontend
            dockerfile: ./frontend/Dockerfile
            service_name: dipc-frontend
    
    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # 设置 QEMU 以支持多架构构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      # 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          config-inline: |
            [registry."ghcr.io"]
              mirrors = ["ghcr.io"]
            [http]
              timeout = 300
      
      # Configure Docker client timeout
      - name: Configure Docker client
        run: |
          mkdir -p ~/.docker
          echo '{"credsStore":"desktop","currentContext":"default","plugins":{"debug":{"hooks":"exec"}}}' > ~/.docker/config.json
          # Increase Docker client timeout
          export DOCKER_CLIENT_TIMEOUT=300
          export COMPOSE_HTTP_TIMEOUT=300
      
      # 登录到 GitHub Container Registry (with retry logic)
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        id: docker_login_1
      
      # Retry Docker login if first attempt fails
      - name: Retry Docker login (attempt 2)
        if: github.event_name != 'pull_request' && steps.docker_login_1.outcome == 'failure'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        id: docker_login_2
      
      # Final retry for Docker login
      - name: Retry Docker login (attempt 3)
        if: github.event_name != 'pull_request' && steps.docker_login_2.outcome == 'failure'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # 登录到 Docker Hub (可选，如果需要推送到 Docker Hub)
      # - name: Log in to Docker Hub
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # 提取元数据（标签、标记等）
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}
          tags: |
            # 默认标签规则
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # 为 main 分支设置 latest 标签
            type=raw,value=latest,enable={{is_default_branch}}
            # 添加 SHA 标签
            type=sha,prefix={{branch}}-,format=short
      
      # 调试：显示构建上下文信息
      - name: Debug - Show build context
        if: matrix.service.name == 'frontend'
        run: |
          echo "=== Build context for ${{ matrix.service.name }} ==="
          echo "Context: ${{ matrix.service.context }}"
          echo "Dockerfile: ${{ matrix.service.dockerfile }}"
          echo "=== Directory contents ==="
          ls -la ${{ matrix.service.context }}
          echo "=== src directory contents ==="
          ls -la ${{ matrix.service.context }}/src || echo "No src directory"
          echo "=== src/lib directory contents ==="
          ls -la ${{ matrix.service.context }}/src/lib || echo "No src/lib directory"
          echo "=== Package.json contents ==="
          cat ${{ matrix.service.context }}/package.json | head -20
          echo "=== Check .dockerignore ==="
          cat ${{ matrix.service.context }}/.dockerignore || echo "No .dockerignore"
      
      # 设置 Docker Buildx 调试模式
      - name: Enable Docker Buildx debug mode
        run: |
          echo "BUILDKIT_PROGRESS=plain" >> $GITHUB_ENV
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV
      
      # 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # 启用详细日志输出
          provenance: false
          # 为不同的服务设置构建参数（如果需要）
          build-args: |
            SERVICE_NAME=${{ matrix.service.name }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
            BUILDKIT_INLINE_CACHE=1
  
  # 构建完成后的通知任务（可选）
  notify:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify build status
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
            echo "✅ All images built and pushed successfully!"
            echo "Images are available at:"
            echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-api"
            echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-worker"
            echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend"
          else
            echo "❌ Build failed!"
          fi