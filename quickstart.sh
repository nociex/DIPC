#!/bin/bash

# DIPC Quick Start Script
# This script sets up the Document Intelligence & Parsing Center with minimal configuration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_FILE="$SCRIPT_DIR/.env"
DOCKER_COMPOSE_FILE="$SCRIPT_DIR/docker-compose.simple.yml"

# Helper functions
print_step() {
    echo -e "${BLUE}==>${NC} $1"
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_banner() {
    echo -e "${BLUE}"
    echo "╔════════════════════════════════════════════════════════╗"
    echo "║           Document Intelligence & Parsing Center       ║"
    echo "║                    Quick Start Setup                   ║"
    echo "╚════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check prerequisites
check_prerequisites() {
    print_step "Checking prerequisites..."
    
    local missing_deps=()
    
    if ! command_exists docker; then
        missing_deps+=("docker")
    fi
    
    if ! command_exists docker-compose; then
        missing_deps+=("docker-compose")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "Missing required dependencies: ${missing_deps[*]}"
        echo ""
        echo "Please install the missing dependencies:"
        echo "- Docker: https://docs.docker.com/get-docker/"
        echo "- Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    # Check if Docker is running
    if ! docker info >/dev/null 2>&1; then
        print_error "Docker is not running. Please start Docker and try again."
        exit 1
    fi
    
    print_success "All prerequisites are met"
}

# Create .env file
create_env_file() {
    print_step "Creating configuration file..."
    
    if [ -f "$ENV_FILE" ]; then
        print_warning "Configuration file already exists. Backing up to .env.backup"
        cp "$ENV_FILE" "$ENV_FILE.backup"
    fi
    
    # Ask for LLM API key
    echo ""
    echo "To use DIPC, you need an LLM provider API key."
    echo "OpenAI is recommended for best results. You can add other providers later."
    echo ""
    
    while [ -z "$openai_key" ]; do
        read -p "Enter your OpenAI API key (required): " openai_key
        if [ -z "$openai_key" ]; then
            echo "API key is required to continue. You can get one from: https://platform.openai.com/api-keys"
        fi
    done
    
    # Generate random passwords
    db_password=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
    
    cat > "$ENV_FILE" << EOF
# DIPC Configuration
# Generated by quickstart.sh on $(date)

# Database Configuration
DATABASE_URL=postgresql://dipc_user:${db_password}@localhost:5432/dipc
POSTGRES_DB=dipc
POSTGRES_USER=dipc_user
POSTGRES_PASSWORD=${db_password}

# Redis Configuration
REDIS_URL=redis://localhost:6379/0
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# Local Storage Configuration
STORAGE_TYPE=local
LOCAL_STORAGE_PATH=/app/storage
STORAGE_BASE_URL=http://localhost:38100/storage

# LLM Provider Configuration
OPENAI_API_KEY=${openai_key}
OPENAI_BASE_URL=https://api.openai.com/v1
OPENAI_MODEL=gpt-4o-mini

# Alternative providers (optional - uncomment to use)
# OPENROUTER_API_KEY=
# OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
# OPENROUTER_MODEL=openai/gpt-4o-mini
# LITELM_BASE_URL=
# LITELM_API_KEY=
# LITELM_MODEL=gpt-4o-mini

# Application Configuration
ENVIRONMENT=development
NEXT_PUBLIC_API_URL=http://localhost:38100

# Vector Database (Qdrant)
QDRANT_URL=http://localhost:6333
ENABLE_VECTORIZATION=true
QDRANT_API_KEY=

# Security
SECRET_KEY=$(openssl rand -base64 32)
JWT_SECRET_KEY=$(openssl rand -base64 32)
EOF
    
    print_success "Configuration file created"
}

# Check if services are running
check_services() {
    print_step "Checking if services are already running..."
    
    local ports=(38110 38100 5432 6379 6333)
    local running_services=()
    
    for port in "${ports[@]}"; do
        if netstat -tuln 2>/dev/null | grep -q ":$port "; then
            running_services+=("$port")
        fi
    done
    
    if [ ${#running_services[@]} -ne 0 ]; then
        print_warning "Some services are already running on ports: ${running_services[*]}"
        echo "This might cause conflicts. Do you want to continue anyway?"
        read -p "Continue? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# Start services
start_services() {
    print_step "Starting DIPC services..."
    
    # Use simple docker-compose if available, otherwise use the main one
    if [ -f "$DOCKER_COMPOSE_FILE" ]; then
        docker-compose -f "$DOCKER_COMPOSE_FILE" up -d
    else
        docker-compose up -d
    fi
    
    print_success "Services started"
}

# Wait for services to be ready
wait_for_services() {
    print_step "Waiting for services to be ready..."
    
    local max_attempts=30
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if curl -s http://localhost:38100/v1/health >/dev/null 2>&1; then
            print_success "API is ready"
            break
        fi
        
        attempt=$((attempt + 1))
        echo -n "."
        sleep 2
    done
    
    if [ $attempt -eq $max_attempts ]; then
        print_warning "API took longer than expected to start. Check logs if needed."
    fi
}

# Initialize database
initialize_database() {
    print_step "Initializing database..."
    
    # Run database migrations
    docker-compose exec -T api python -m alembic upgrade head 2>/dev/null || {
        print_warning "Database migration failed. This might be normal on first run."
    }
    
    print_success "Database initialized"
}

# Create storage directory
create_storage_directory() {
    print_step "Setting up local storage..."
    
    # Create storage directory if it doesn't exist
    mkdir -p ./storage
    
    # Set permissions
    chmod 755 ./storage
    
    print_success "Local storage configured"
}

# Show final information
show_final_info() {
    echo ""
    echo -e "${GREEN}🎉 DIPC is now running!${NC}"
    echo ""
    echo "Access URLs:"
    echo "  📱 Frontend:        http://localhost:38110"
    echo "  🔧 API:             http://localhost:38100"
    echo "  📚 API Docs:        http://localhost:38100/docs"
    echo "  🗄️ Qdrant:          http://localhost:6333"
    echo ""
    echo "Services:"
    echo "  🗄️ Vector Database: Qdrant (enabled by default)"
    echo "  💾 File Storage:    Local storage (./storage)"
    echo ""
    echo "To stop the services:"
    echo "  docker-compose down"
    echo ""
    echo "To view logs:"
    echo "  docker-compose logs -f"
    echo ""
    echo "Configuration file: $ENV_FILE"
    echo ""
    
    if [ -z "$openai_key" ]; then
        print_warning "No LLM API key configured. Please edit $ENV_FILE and restart services."
        echo "  docker-compose restart"
    fi
}

# Main execution
main() {
    print_banner
    
    check_prerequisites
    check_services
    create_env_file
    start_services
    wait_for_services
    initialize_database
    create_storage_directory
    show_final_info
}

# Handle script interruption
trap 'echo -e "\n${RED}Script interrupted${NC}"; exit 1' INT TERM

# Run main function
main "$@"