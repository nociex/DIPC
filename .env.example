# =============================================================================
# DIPC Configuration Example
# =============================================================================
# Copy this file to .env and modify the values according to your setup
# For quick start, run: ./quickstart.sh (Linux/Mac) or quickstart.bat (Windows)

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL database connection string
DATABASE_URL=postgresql://dipc_user:dipc_password@dipc-db:5432/dipc

# PostgreSQL database settings (for Docker Compose)
POSTGRES_DB=dipc
POSTGRES_USER=dipc_user
POSTGRES_PASSWORD=dipc_password

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================
# Redis connection for caching and message queue
REDIS_URL=redis://dipc-redis:6379/0

# Celery configuration (uses Redis as broker)
CELERY_BROKER_URL=redis://dipc-redis:6379/0
CELERY_RESULT_BACKEND=redis://dipc-redis:6379/0

# =============================================================================
# STORAGE CONFIGURATION
# =============================================================================
# Storage type: local (default) or s3 (for production)
STORAGE_TYPE=local

# Local storage configuration (default)
LOCAL_STORAGE_PATH=/app/storage
STORAGE_BASE_URL=http://localhost:38100/storage

# S3 configuration (for production use)
# STORAGE_TYPE=s3
# S3_ENDPOINT_URL=https://s3.amazonaws.com
# S3_ACCESS_KEY_ID=your_aws_access_key
# S3_SECRET_ACCESS_KEY=your_aws_secret_key
# S3_BUCKET_NAME=your-dipc-bucket
# S3_REGION=us-east-1

# =============================================================================
# LLM PROVIDER CONFIGURATION
# =============================================================================
# You need at least one LLM provider for document processing.
# Configure your preferred provider below - OpenAI is recommended for best results.

# Primary LLM Provider (REQUIRED - Choose one)
# OpenAI (recommended for best results)
OPENAI_API_KEY=your-openai-api-key-here
OPENAI_BASE_URL=https://api.openai.com/v1
OPENAI_MODEL=gpt-4o-mini

# Alternative LLM Providers (OPTIONAL)
# Uncomment and configure if you prefer to use these instead:

# OpenRouter (access to multiple models)
# OPENROUTER_API_KEY=
# OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
# OPENROUTER_MODEL=openai/gpt-4o-mini

# LiteLLM (unified interface for multiple providers)
# LITELM_BASE_URL=
# LITELM_API_KEY=
# LITELM_MODEL=gpt-4o-mini

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
# Application environment
ENVIRONMENT=development

# Application secrets (generate secure random strings)
SECRET_KEY=dev-secret-key-change-in-production
JWT_SECRET_KEY=dev-jwt-secret-change-in-production

# Frontend API endpoint
NEXT_PUBLIC_API_URL=http://localhost:38100

# =============================================================================
# VECTOR DATABASE CONFIGURATION
# =============================================================================
# Enable vector database for semantic search capabilities
ENABLE_VECTORIZATION=true

# Qdrant vector database (enabled by default)
QDRANT_URL=http://dipc-qdrant:6333
QDRANT_API_KEY=

# Alternative: Milvus vector database (for production)
# ENABLE_VECTORIZATION=false
# MILVUS_URL=localhost:19530
# MILVUS_USER=your-milvus-user
# MILVUS_PASSWORD=your-milvus-password

# =============================================================================
# PROCESSING CONFIGURATION
# =============================================================================
# Maximum file size for uploads (in bytes)
MAX_FILE_SIZE=104857600

# Maximum number of concurrent processing tasks
MAX_CONCURRENT_TASKS=5

# Processing timeout (in seconds)
PROCESSING_TIMEOUT=300

# Cost estimation limits (in USD)
MAX_COST_PER_TASK=1.00
DAILY_COST_LIMIT=10.00

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# Enable/disable security features
ENABLE_RATE_LIMITING=true
RATE_LIMIT_PER_MINUTE=100

# CORS settings
CORS_ALLOWED_ORIGINS=["http://localhost:38110", "http://localhost:38100"]

# File upload security
ALLOWED_FILE_EXTENSIONS=["pdf", "txt", "docx", "zip", "jpg", "jpeg", "png", "gif"]
MAX_ZIP_EXTRACTION_SIZE=1073741824

# =============================================================================
# MONITORING AND LOGGING
# =============================================================================
# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Enable detailed request logging
ENABLE_REQUEST_LOGGING=true

# Health check configuration
HEALTH_CHECK_TIMEOUT=30

# =============================================================================
# PERFORMANCE CONFIGURATION
# =============================================================================
# Worker configuration
CELERY_WORKER_CONCURRENCY=2
CELERY_WORKER_PREFETCH_MULTIPLIER=1
CELERY_TASK_ALWAYS_EAGER=false

# Database connection pool
DB_POOL_SIZE=10
DB_MAX_OVERFLOW=20

# Cache configuration
CACHE_TTL=3600  # 1 hour

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================
# Development-specific settings (only used when ENVIRONMENT=development)
DEBUG=true
ENABLE_SWAGGER_UI=true
ENABLE_CORS=true

# Hot reload for development
ENABLE_HOT_RELOAD=true

# =============================================================================
# PRODUCTION CONFIGURATION
# =============================================================================
# Production-specific settings (only used when ENVIRONMENT=production)
# DEBUG=false
# ENABLE_SWAGGER_UI=false
# USE_SSL=true
# SSL_CERT_PATH=/path/to/cert.pem
# SSL_KEY_PATH=/path/to/key.pem

# =============================================================================
# BACKUP AND MAINTENANCE
# =============================================================================
# Automatic cleanup configuration
ENABLE_AUTO_CLEANUP=true
CLEANUP_INTERVAL_HOURS=24
TEMP_FILE_RETENTION_HOURS=48
COMPLETED_TASK_RETENTION_DAYS=30

# Backup configuration
ENABLE_DB_BACKUP=false
BACKUP_SCHEDULE="0 2 * * *"  # Daily at 2 AM
BACKUP_RETENTION_DAYS=7

# =============================================================================
# INTEGRATION CONFIGURATION
# =============================================================================
# Webhook notifications (optional)
WEBHOOK_ENABLED=false
WEBHOOK_URL=https://your-webhook-endpoint.com/notify
WEBHOOK_SECRET=your-webhook-secret

# Email notifications (optional)
EMAIL_ENABLED=false
SMTP_HOST=your-smtp-host.com
SMTP_PORT=587
SMTP_USER=your-smtp-user
SMTP_PASSWORD=your-smtp-password
SMTP_FROM_EMAIL=noreply@your-domain.com

# =============================================================================
# ADVANCED CONFIGURATION
# =============================================================================
# Custom model configurations
CUSTOM_MODEL_CONFIGS='{"gpt-4": {"max_tokens": 4000, "temperature": 0.1}}'

# Feature flags
ENABLE_EXPERIMENTAL_FEATURES=false
ENABLE_BATCH_PROCESSING=true
ENABLE_ADVANCED_OCR=false

# Performance tuning
ENABLE_RESULT_CACHING=true
CACHE_STRATEGY="lru"  # lru, lfu, ttl
PREFETCH_MODELS=true

# =============================================================================
# TROUBLESHOOTING
# =============================================================================
# If you encounter issues, try these settings:

# 1. For connection issues:
#    - Check if all services are running: docker-compose ps
#    - Verify network connectivity: docker network ls
#    - Check logs: docker-compose logs -f

# 2. For authentication issues:
#    - Verify API keys are correct and have sufficient credits
#    - Check if keys have the required permissions

# 3. For performance issues:
#    - Increase worker concurrency: CELERY_WORKER_CONCURRENCY=4
#    - Adjust processing timeout: PROCESSING_TIMEOUT=600
#    - Enable caching: ENABLE_RESULT_CACHING=true

# 4. For storage issues:
#    - Check MinIO console: http://localhost:9001
#    - Verify bucket exists and has proper permissions
#    - Check available disk space

# 5. For database issues:
#    - Check PostgreSQL logs: docker-compose logs db
#    - Verify database connection: psql -h localhost -U dipc_user -d dipc
#    - Run migrations: docker-compose exec api python -m alembic upgrade head

# =============================================================================
# GETTING HELP
# =============================================================================
# Documentation: https://docs.dipc.example.com
# GitHub Issues: https://github.com/your-org/dipc/issues
# Community: https://discord.gg/your-discord-server
# Email: support@dipc.example.com