@echo off
REM DIPC Quick Start Script for Windows
REM This script sets up the Document Intelligence & Parsing Center with minimal configuration

setlocal enabledelayedexpansion

REM Configuration
set "SCRIPT_DIR=%~dp0"
set "ENV_FILE=%SCRIPT_DIR%.env"
set "DOCKER_COMPOSE_FILE=%SCRIPT_DIR%docker-compose.simple.yml"

REM Helper functions (using labels as functions)
goto :main

:print_banner
echo.
echo ========================================================
echo           Document Intelligence ^& Parsing Center
echo                    Quick Start Setup
echo ========================================================
echo.
goto :eof

:print_step
echo [INFO] %~1
goto :eof

:print_success
echo [SUCCESS] %~1
goto :eof

:print_warning
echo [WARNING] %~1
goto :eof

:print_error
echo [ERROR] %~1
goto :eof

:check_prerequisites
call :print_step "Checking prerequisites..."

REM Check for Docker
docker --version >nul 2>&1
if !errorlevel! neq 0 (
    call :print_error "Docker is not installed or not in PATH"
    echo Please install Docker Desktop from: https://docs.docker.com/get-docker/
    exit /b 1
)

REM Check for Docker Compose
docker-compose --version >nul 2>&1
if !errorlevel! neq 0 (
    call :print_error "Docker Compose is not installed or not in PATH"
    echo Please install Docker Compose from: https://docs.docker.com/compose/install/
    exit /b 1
)

REM Check if Docker is running
docker info >nul 2>&1
if !errorlevel! neq 0 (
    call :print_error "Docker is not running. Please start Docker Desktop and try again."
    exit /b 1
)

call :print_success "All prerequisites are met"
goto :eof

:create_env_file
call :print_step "Creating configuration file..."

if exist "%ENV_FILE%" (
    call :print_warning "Configuration file already exists. Backing up to .env.backup"
    copy "%ENV_FILE%" "%ENV_FILE%.backup" >nul
)

echo.
echo To use DIPC, you need an LLM provider API key.
echo OpenAI is recommended for best results. You can add other providers later.
echo.

:ask_api_key
set /p "openai_key=Enter your OpenAI API key (required): "
if "!openai_key!"=="" (
    echo API key is required to continue. You can get one from: https://platform.openai.com/api-keys
    goto :ask_api_key
)

REM Generate random passwords using PowerShell
for /f "delims=" %%i in ('powershell -Command "[System.Web.Security.Membership]::GeneratePassword(25, 5)"') do set "db_password=%%i"
REM No MinIO password needed for local storage
for /f "delims=" %%i in ('powershell -Command "[System.Web.Security.Membership]::GeneratePassword(32, 8)"') do set "secret_key=%%i"
for /f "delims=" %%i in ('powershell -Command "[System.Web.Security.Membership]::GeneratePassword(32, 8)"') do set "jwt_secret=%%i"

REM Create .env file
(
echo # DIPC Configuration
echo # Generated by quickstart.bat on %date% %time%
echo.
echo # Database Configuration
echo DATABASE_URL=postgresql://dipc_user:!db_password!@localhost:5432/dipc
echo POSTGRES_DB=dipc
echo POSTGRES_USER=dipc_user
echo POSTGRES_PASSWORD=!db_password!
echo.
echo # Redis Configuration
echo REDIS_URL=redis://localhost:6379/0
echo CELERY_BROKER_URL=redis://localhost:6379/0
echo CELERY_RESULT_BACKEND=redis://localhost:6379/0
echo.
echo # Local Storage Configuration
echo STORAGE_TYPE=local
echo LOCAL_STORAGE_PATH=/app/storage
echo STORAGE_BASE_URL=http://localhost:38100/storage
echo.
echo # LLM Provider Configuration
echo OPENAI_API_KEY=!openai_key!
echo OPENAI_BASE_URL=https://api.openai.com/v1
echo OPENAI_MODEL=gpt-4o-mini
echo.
echo # Alternative providers ^(optional - uncomment to use^)
echo # OPENROUTER_API_KEY=
echo # OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
echo # OPENROUTER_MODEL=openai/gpt-4o-mini
echo # LITELM_BASE_URL=
echo # LITELM_API_KEY=
echo # LITELM_MODEL=gpt-4o-mini
echo.
echo # Application Configuration
echo ENVIRONMENT=development
echo NEXT_PUBLIC_API_URL=http://localhost:38100
echo.
echo # Vector Database ^(Qdrant^)
echo QDRANT_URL=http://localhost:6333
echo ENABLE_VECTORIZATION=true
echo QDRANT_API_KEY=
echo.
echo # Security
echo SECRET_KEY=!secret_key!
echo JWT_SECRET_KEY=!jwt_secret!
) > "%ENV_FILE%"

call :print_success "Configuration file created"
goto :eof

:check_services
call :print_step "Checking if services are already running..."

set "ports_in_use="
for %%p in (38110 38100 5432 6379 6333) do (
    netstat -an | findstr ":%%p " >nul 2>&1
    if !errorlevel! equ 0 (
        set "ports_in_use=!ports_in_use! %%p"
    )
)

if not "!ports_in_use!"=="" (
    call :print_warning "Some services are already running on ports:!ports_in_use!"
    echo This might cause conflicts. Do you want to continue anyway?
    set /p "continue=Continue? (y/N): "
    if /i not "!continue!"=="y" (
        exit /b 1
    )
)
goto :eof

:start_services
call :print_step "Starting DIPC services..."

if exist "%DOCKER_COMPOSE_FILE%" (
    docker-compose -f "%DOCKER_COMPOSE_FILE%" up -d
) else (
    docker-compose up -d
)

if !errorlevel! neq 0 (
    call :print_error "Failed to start services"
    exit /b 1
)

call :print_success "Services started"
goto :eof

:wait_for_services
call :print_step "Waiting for services to be ready..."

set /a "max_attempts=30"
set /a "attempt=0"

:wait_loop
if !attempt! geq !max_attempts! (
    call :print_warning "API took longer than expected to start. Check logs if needed."
    goto :eof
)

REM Try to connect to the API
powershell -Command "try { Invoke-RestMethod -Uri 'http://localhost:38100/v1/health' -TimeoutSec 2 | Out-Null; exit 0 } catch { exit 1 }" >nul 2>&1
if !errorlevel! equ 0 (
    call :print_success "API is ready"
    goto :eof
)

set /a "attempt=!attempt!+1"
echo|set /p="."
timeout /t 2 /nobreak >nul
goto :wait_loop

:initialize_database
call :print_step "Initializing database..."

docker-compose exec -T api python -m alembic upgrade head 2>nul
if !errorlevel! neq 0 (
    call :print_warning "Database migration failed. This might be normal on first run."
)

call :print_success "Database initialized"
goto :eof

:create_storage_directory
call :print_step "Setting up local storage..."

REM Create storage directory
if not exist ".\storage" mkdir ".\storage"

call :print_success "Local storage configured"
goto :eof

:show_final_info
echo.
echo ===========================================
echo   DIPC is now running!
echo ===========================================
echo.
echo Access URLs:
echo   Frontend:        http://localhost:38110
echo   API:             http://localhost:38100
echo   API Docs:        http://localhost:38100/docs
echo   Qdrant:          http://localhost:6333
echo.
echo Services:
echo   Vector Database: Qdrant (enabled by default)
echo   File Storage:    Local storage (.\storage)
echo.
echo To stop the services:
echo   docker-compose down
echo.
echo To view logs:
echo   docker-compose logs -f
echo.
echo Configuration file: %ENV_FILE%
echo.

if "!openai_key!"=="" (
    call :print_warning "No LLM API key configured. Please edit %ENV_FILE% and restart services."
    echo   docker-compose restart
)

echo.
echo Press any key to exit...
pause >nul
goto :eof

:main
call :print_banner
call :check_prerequisites
if !errorlevel! neq 0 exit /b !errorlevel!

call :check_services
if !errorlevel! neq 0 exit /b !errorlevel!

call :create_env_file
if !errorlevel! neq 0 exit /b !errorlevel!

call :start_services
if !errorlevel! neq 0 exit /b !errorlevel!

call :wait_for_services
call :initialize_database
call :create_storage_directory
call :show_final_info